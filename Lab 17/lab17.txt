Don't hesitate to ask the TA's for help. If you are stuck on
one part, or not clear about what it's asking, feel free to
ask. Remember, we are here to help you :)

This is not a timed lab so talk with your friends, use the book, etc.


Part I - Copying
----------------
1.  Examine the following structure:

typedef struct
{
    int x;
    char* y;
} something;


Examine this function that copies this structure into the dest parameter


void copy_struct(const something* src, something* dest)
{
    *dest = *src;
}

void main(void)
{
    char s[6];
    something a, b;
    a.x = 32;
    a.y = s;
    a.y[0] = 'H';
    a.y[1] = 'E';
    a.y[2] = 'L';
    a.y[3] = 'L';
    a.y[4] = 'O';
    a.y[5] = '\0';


    copy_struct(&a, &b);
    printf("a.x = %d, a.y = %s, b.x = %d, b.y = %s\n", a.x, a.y, b.x, b.y);
    a.x = 27;
    a.y[0] = 'J';
    printf("a.x = %d, a.y = %s, b.x = %d, b.y = %s\n", a.x, a.y, b.x, b.y);

}


A. Note that there is a problem with this code. Explain what the problem is. What gets printed out?  Explain why in your own words.

"a.x = 32, a.y = HELLO, b.x = 32, b.y = HELLO"
"a.x = 27, a.y = JELLO, b.x = 32, b.y = JELLO"

change string occurs in the same address



B. Change only the copy_struct function so that the problem in the above code does not happen!

change char* y; to char y;



C. Suppose if the "something" structure was changed to be the following

typedef struct
{
    int x;
    char y[6];
} something;

and the line

  a.y = s;

was removed, and the copy_struct function was the same as in part a.

Now tell me what gets printed out and why in your own words.


"a.x = 32, a.y = HELLO, b.x = 32, b.y = HELLO"
"a.x = 27, a.y = JELLO, b.x = 32, b.y = HELLO"

assigned by value instead of pointer


D.  Now explain the terms "shallow copy" and "deep copy" in terms of parts a and b.

shallow copy: only copied over the memory address

deep copy: copied the value into a new address




Part II - sizeof
----------------
What is the sizeof each of these things? Quickly! Do not use the book or a TA.
Tell me what (you think) the sizes of these things are.

1. char 1
2. short 2
3. int 4
4. long 8
5. char* 8
6. int* 8
7. void* 8
8. int** 8
9. this structure: struct p {char a; char b;}; 2
10. this structure: struct p {short p; char a; int b;}; 2

Now write a C program (named sizeof.c) that tells us the size of each of these
using the sizeof keyword and the printf function.

E. How many of these did you get right?






F. Why shouldn't you hardcode the sizes of the variable types?




